generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(cuid())
  email               String        @unique
  password            String
  role                Role          @default(PATIENT)
  firstName           String
  lastName            String
  phone               String?
  isActive            Boolean       @default(true)
  twoFAEnabled        Boolean       @default(false)
  twoFASecret         String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  createdAppointments Appointment[] @relation("CreatedBy")
  sentMessages        Message[]     @relation("SentMessages")
  receivedMessages    Message[]     @relation("ReceivedMessages")
  patient             Patient?
  provider            Provider?
  sessions            Session[]
  sharedRecords       SharedMedicalRecord[] @relation("SharedByUser")
  notifications       Notification[] @relation("UserNotifications")

  @@map("users")
}

model Patient {
  id                    String          @id @default(cuid())
  userId                String          @unique
  dateOfBirth           DateTime
  gender                String?
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  emergencyContact      String?
  emergencyPhone        String?
  insuranceType         InsuranceType   @default(SELF_PAY)
  insuranceProvider     String?
  insurancePolicyNumber String?
  insuranceGroupNumber  String?
  allergies             String?
  medications           String?
  medicalHistory        String?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  appointments          Appointment[]
  billings              Billing[]
  records               MedicalRecord[]
  messages              Message[]
  user                  User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("patients")
}

model Provider {
  id            String          @id @default(cuid())
  userId        String          @unique
  title         String?
  specialty     String?
  licenseNumber String?
  department    String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  appointments  Appointment[]
  records       MedicalRecord[]
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("providers")
}

model Appointment {
  id                String            @id @default(cuid())
  patientId         String
  providerId        String?
  createdById       String
  title             String
  description       String?
  startTime         DateTime
  endTime           DateTime
  status            AppointmentStatus @default(SCHEDULED)
  type              String?
  noShowProbability Float             @default(0.0)
  riskFactors       String?
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  createdBy         User              @relation("CreatedBy", fields: [createdById], references: [id])
  patient           Patient           @relation(fields: [patientId], references: [id])
  provider          Provider?         @relation(fields: [providerId], references: [id])
  billing           Billing?
  records           MedicalRecord[]

  @@map("appointments")
}

model MedicalRecord {
  id                     String       @id @default(cuid())
  patientId              String
  providerId             String
  appointmentId          String?
  chiefComplaint         String?
  diagnosis              String?
  treatment              String?
  notes                  String?
  bloodPressureSystolic  Int?
  bloodPressureDiastolic Int?
  heartRate              Int?
  temperature            Float?
  weight                 Float?
  height                 Float?
  labResults             String?
  prescriptions          String?
  readmissionRisk        Float        @default(0.0)
  suggestedCodes         String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  appointment            Appointment? @relation(fields: [appointmentId], references: [id])
  patient                Patient      @relation(fields: [patientId], references: [id])
  provider               Provider     @relation(fields: [providerId], references: [id])
  sharedRecords          SharedMedicalRecord[]

  @@map("medical_records")
}

model Billing {
  id                    String        @id @default(cuid())
  patientId             String
  appointmentId         String?       @unique
  invoiceNumber         String        @unique
  serviceDate           DateTime
  serviceDescription    String
  icdCodes              String?
  cptCodes              String?
  subtotal              Float
  tax                   Float         @default(0.0)
  total                 Float
  insuranceBilled       Float         @default(0.0)
  patientResponsibility Float         @default(0.0)
  status                BillingStatus @default(PENDING)
  paymentMethod         String?
  paymentDate           DateTime?
  paidAmount            Float         @default(0.0)
  stripePaymentIntentId String?
  suggestedCodes        String?
  notes                 String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  appointment           Appointment?  @relation(fields: [appointmentId], references: [id])
  patient               Patient       @relation(fields: [patientId], references: [id])

  @@map("billing")
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  patientId  String?
  content    String
  isRead     Boolean  @default(false)
  metadata   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  patient    Patient? @relation(fields: [patientId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])

  @@map("messages")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model SharedMedicalRecord {
  id         String   @id @default(cuid())
  recordId   String
  shareToken String   @unique
  sharedBy   String
  sharedWith String
  message    String?
  expiresAt  DateTime
  accessedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  record     MedicalRecord @relation(fields: [recordId], references: [id], onDelete: Cascade)
  sharedByUser User @relation("SharedByUser", fields: [sharedBy], references: [id])

  @@map("shared_medical_records")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  metadata  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum Role {
  ADMIN
  PROVIDER
  PATIENT
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum BillingStatus {
  PENDING
  SUBMITTED
  PROCESSING
  PAID
  DENIED
  PARTIAL
}

enum InsuranceType {
  PRIVATE
  MEDICARE
  MEDICAID
  SELF_PAY
  OTHER
}
